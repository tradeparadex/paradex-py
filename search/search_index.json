{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Paradex Python SDK","text":"<p>Warning</p> <p>Experimental SDK, library API is subject to change</p>"},{"location":"#paradex_py.paradex.Paradex","title":"<code>paradex_py.paradex.Paradex</code>","text":"<p>Paradex class to interact with Paradex REST API.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>Environment</code> <p>Environment</p> required <code>l1_address</code> <code>str</code> <p>L1 address. Defaults to None.</p> <code>None</code> <code>l1_private_key</code> <code>str</code> <p>L1 private key. Defaults to None.</p> <code>None</code> <code>l2_private_key</code> <code>str</code> <p>L2 private key. Defaults to None.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger. Defaults to None.</p> <code>None</code> <code>ws_timeout</code> <code>int</code> <p>WebSocket read timeout in seconds. Defaults to None (uses default).</p> <code>None</code> <code>http_client</code> <code>HttpClient</code> <p>Custom HTTP client for injection. Defaults to None.</p> <code>None</code> <code>api_base_url</code> <code>str</code> <p>Custom API base URL override. Defaults to None.</p> <code>None</code> <code>default_timeout</code> <code>float</code> <p>Default HTTP request timeout in seconds. Defaults to None.</p> <code>None</code> <code>retry_strategy</code> <code>RetryStrategy</code> <p>Custom retry/backoff strategy. Defaults to None.</p> <code>None</code> <code>request_hook</code> <code>RequestHook</code> <p>Hook for request/response observability. Defaults to None.</p> <code>None</code> <code>auto_start_ws_reader</code> <code>bool</code> <p>Whether to automatically start WS message reader. Defaults to True.</p> <code>True</code> <code>ws_connector</code> <code>WebSocketConnector</code> <p>Custom WebSocket connector for injection. Defaults to None.</p> <code>None</code> <code>ws_url_override</code> <code>str</code> <p>Custom WebSocket URL override. Defaults to None.</p> <code>None</code> <code>ws_reader_sleep_on_error</code> <code>float</code> <p>WebSocket reader sleep duration after errors. Defaults to 1.0.</p> <code>1.0</code> <code>ws_reader_sleep_on_no_connection</code> <code>float</code> <p>WebSocket reader sleep when no connection. Defaults to 1.0.</p> <code>1.0</code> <code>validate_ws_messages</code> <code>bool</code> <p>Enable JSON-RPC message validation. Defaults to False.</p> <code>False</code> <code>ping_interval</code> <code>float</code> <p>WebSocket ping interval in seconds. Defaults to None.</p> <code>None</code> <code>disable_reconnect</code> <code>bool</code> <p>Disable automatic WebSocket reconnection. Defaults to False.</p> <code>False</code> <code>auto_auth</code> <code>bool</code> <p>Whether to automatically handle onboarding/auth. Defaults to True.</p> <code>True</code> <code>auth_provider</code> <code>AuthProvider</code> <p>Custom authentication provider. Defaults to None.</p> <code>None</code> <code>signer</code> <code>Signer</code> <p>Custom order signer for submit/modify/batch operations. Defaults to None.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from paradex_py import Paradex\n&gt;&gt;&gt; from paradex_py.environment import Environment\n&gt;&gt;&gt; paradex = Paradex(env=Environment.TESTNET)\n&gt;&gt;&gt; # With custom timeout\n&gt;&gt;&gt; paradex = Paradex(env=Environment.TESTNET, ws_timeout=30)\n&gt;&gt;&gt; # With simulator-friendly injection (high-frequency, no sleeps)\n&gt;&gt;&gt; paradex = Paradex(env=Environment.TESTNET, auto_start_ws_reader=False,\n...                   http_client=custom_client, ws_connector=custom_connector,\n...                   ws_reader_sleep_on_error=0, ws_reader_sleep_on_no_connection=0)\n</code></pre>"},{"location":"#paradex_py.paradex.Paradex.__init__","title":"<code>__init__(env, l1_address=None, l1_private_key=None, l2_private_key=None, logger=None, ws_timeout=None, http_client=None, api_base_url=None, default_timeout=None, retry_strategy=None, request_hook=None, auto_start_ws_reader=True, ws_connector=None, ws_url_override=None, ws_reader_sleep_on_error=1.0, ws_reader_sleep_on_no_connection=1.0, validate_ws_messages=False, ping_interval=None, disable_reconnect=False, auto_auth=True, auth_provider=None, signer=None)</code>","text":""},{"location":"#paradex_py.paradex.Paradex.init_account","title":"<code>init_account(l1_address, l1_private_key=None, l2_private_key=None)</code>","text":"<p>Initialize paradex account with l1 or l2 private keys. Cannot be called if account is already initialized.</p> <p>Parameters:</p> Name Type Description Default <code>l1_address</code> <code>str</code> <p>L1 address</p> required <code>l1_private_key</code> <code>str</code> <p>L1 private key</p> <code>None</code> <code>l2_private_key</code> <code>str</code> <p>L2 private key</p> <code>None</code>"},{"location":"#l2-only-authentication-subkeys","title":"L2-Only Authentication (Subkeys)","text":"<p>For users who only have L2 credentials (subkeys) and don't need L1 onboarding:</p>"},{"location":"#paradex_py.paradex_subkey.ParadexSubkey","title":"<code>paradex_py.paradex_subkey.ParadexSubkey</code>","text":"<p>ParadexSubkey class for L2-only authentication using subkeys.</p> <p>This class extends Paradex functionality but uses SubkeyAccount for L2-only authentication without requiring L1 credentials.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>Environment</code> <p>Environment</p> required <code>l2_private_key</code> <code>str</code> <p>L2 private key (required)</p> required <code>l2_address</code> <code>str</code> <p>L2 address of the main account (required)</p> required <code>logger</code> <code>Logger</code> <p>Logger. Defaults to None.</p> <code>None</code> <code>ws_timeout</code> <code>int</code> <p>WebSocket read timeout in seconds. Defaults to None (uses default).</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from paradex_py import ParadexSubkey\n&gt;&gt;&gt; from paradex_py.environment import Environment\n&gt;&gt;&gt; paradex = ParadexSubkey(\n...     env=Environment.TESTNET,\n...     l2_private_key=\"0x...\",\n...     l2_address=\"0x...\"\n... )\n&gt;&gt;&gt; # With custom timeout\n&gt;&gt;&gt; paradex = ParadexSubkey(\n...     env=Environment.TESTNET,\n...     l2_private_key=\"0x...\",\n...     l2_address=\"0x...\",\n...     ws_timeout=30\n... )\n</code></pre>"},{"location":"#paradex_py.paradex_subkey.ParadexSubkey.init_account","title":"<code>init_account()</code>  <code>async</code>","text":"<p>Initialize account for L2-only authentication.</p> <p>This method is provided for compatibility with the Paradex interface, but the account is already initialized in init for subkeys.</p>"},{"location":"#usage-examples","title":"Usage Examples","text":"<p>L1 + L2 Authentication (Traditional):</p> <pre><code>from paradex_py import Paradex\nfrom paradex_py.environment import Environment\n\n# Requires both L1 and L2 credentials\nparadex = Paradex(\n    env=Environment.TESTNET,\n    l1_address=\"0x...\",\n    l1_private_key=\"0x...\"\n)\n</code></pre> <p>L2-Only Authentication (Subkeys):</p> <pre><code>from paradex_py import ParadexSubkey\nfrom paradex_py.environment import Environment\n\n# Only requires L2 credentials - no L1 needed\nparadex = ParadexSubkey(\n    env=Environment.TESTNET,\n    l2_private_key=\"0x...\",\n    l2_address=\"0x...\"\n)\n\n# Use exactly like regular Paradex\nawait paradex.init_account()  # Already initialized\nmarkets = await paradex.api_client.get_markets()\n</code></pre> <p>WebSocket Usage:</p> <pre><code>async def on_message(ws_channel, message):\n    print(ws_channel, message)\n\nawait paradex.ws_client.connect()\nawait paradex.ws_client.subscribe(ParadexWebsocketChannel.MARKETS_SUMMARY, callback=on_message)\n</code></pre>"},{"location":"#when-to-use-each-approach","title":"When to Use Each Approach","text":"<p>Use <code>Paradex</code> (L1 + L2) when: - You have both L1 (Ethereum) and L2 (Starknet) credentials - You have never logged in to Paradex using this account before - You need to perform on-chain operations (transfers, withdrawals)</p> <p>Use <code>ParadexSubkey</code> (L2-only) when: - You only have L2 credentials - The account has already been onboarded (You have logged in to Paradex before) - You do not need on-chain operations (withdrawals, transfers)</p>"},{"location":"#key-differences","title":"Key Differences","text":"Feature <code>Paradex</code> <code>ParadexSubkey</code> Authentication L1 + L2 L2-only Onboarding \u2705 Supported \u274c Blocked On-chain Operations \u2705 Supported \u274c Blocked API Access \u2705 Full access \u2705 Full access WebSocket \u2705 Supported \u2705 Supported Order Management \u2705 Supported \u2705 Supported"},{"location":"#api-documentation-links","title":"API Documentation Links","text":"<p>Full details for REST API &amp; WebSocket JSON-RPC API can be found at the following links:</p> <ul> <li>Environment - Testnet</li> <li>Environment - Prod</li> </ul>"},{"location":"#paradex_py.api.api_client.ParadexApiClient","title":"<code>paradex_py.api.api_client.ParadexApiClient</code>","text":"<p>             Bases: <code>BlockTradesMixin</code>, <code>HttpClient</code></p> <p>Class to interact with Paradex REST API.     Initialized along with <code>Paradex</code> class.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>Environment</code> <p>Environment</p> required <code>logger</code> <code>Logger</code> <p>Logger. Defaults to None.</p> <code>None</code> <code>http_client</code> <code>HttpClient</code> <p>Custom HTTP client for injection. Defaults to None.</p> <code>None</code> <code>api_base_url</code> <code>str</code> <p>Custom base URL override. Defaults to None.</p> <code>None</code> <code>auto_auth</code> <code>bool</code> <p>Whether to automatically handle onboarding/auth. Defaults to True.</p> <code>True</code> <code>auth_provider</code> <code>AuthProvider</code> <p>Custom authentication provider. Defaults to None.</p> <code>None</code> <code>signer</code> <code>Signer</code> <p>Custom order signer for submit/modify/batch operations. Defaults to None.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from paradex_py import Paradex\n&gt;&gt;&gt; from paradex_py.environment import Environment\n&gt;&gt;&gt; paradex = Paradex(env=Environment.TESTNET)\n</code></pre>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.cancel_all_orders","title":"<code>cancel_all_orders(params=None)</code>","text":"<p>Cancel all open orders for specific market or for all markets.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict | None</code> <p><code>market</code>: Market Name</p> <code>None</code>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.cancel_order","title":"<code>cancel_order(order_id)</code>","text":"<p>Cancel open order previously sent to Paradex from this account.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>Order Id</p> required"},{"location":"#paradex_py.api.api_client.ParadexApiClient.cancel_order_by_client_id","title":"<code>cancel_order_by_client_id(client_id)</code>","text":"<p>Cancel open order previously sent to Paradex from this account.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>Order id as assigned by a trader.</p> required"},{"location":"#paradex_py.api.api_client.ParadexApiClient.cancel_orders_batch","title":"<code>cancel_orders_batch(order_ids=None, client_order_ids=None)</code>","text":"<p>Cancel batch of orders by order IDs or client order IDs.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>order_ids</code> <code>list[str] | None</code> <p>List of order IDs assigned by Paradex</p> <code>None</code> <code>client_order_ids</code> <code>list[str] | None</code> <p>List of client-assigned order IDs</p> <code>None</code> <p>Returns:</p> Name Type Description <code>results</code> <code>list</code> <p>List of cancellation results for each order</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_account_info","title":"<code>fetch_account_info()</code>","text":"<p>Fetch profile for this account. Private endpoint requires authorization.</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_account_profile","title":"<code>fetch_account_profile()</code>","text":"<p>Fetch profile for this account. Private endpoint requires authorization.</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_account_summary","title":"<code>fetch_account_summary()</code>","text":"<p>Fetch current summary for this account. Private endpoint requires authorization.</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_balances","title":"<code>fetch_balances()</code>","text":"<p>Fetch all coin balances for this account.     Private endpoint requires authorization.</p> <p>Returns:</p> Name Type Description <code>results</code> <code>list</code> <p>List of Balances</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_bbo","title":"<code>fetch_bbo(market)</code>","text":"<p>Fetch best bid/offer for specific market.</p> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>str</code> <p>Market Name</p> required"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_fills","title":"<code>fetch_fills(params=None)</code>","text":"<p>Fetch history of fills for this account.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict | None</code> <p><code>cursor</code>: Returns the <code>next</code> paginated page</p> <p><code>end_at</code>: End Time (unix time millisecond)</p> <p><code>market</code>: Market for the fills</p> <p><code>page_size</code>: Limit the number of responses in the page</p> <p><code>start_at</code>: Start Time (unix time millisecond)</p> <code>None</code> <p>Returns:</p> Name Type Description <code>next</code> <code>str</code> <p>The pointer to fetch next set of records (null if there are no records left)</p> <code>prev</code> <code>str</code> <p>The pointer to fetch previous set of records (null if there are no records left)</p> <code>results</code> <code>list</code> <p>List of Fills</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_funding_data","title":"<code>fetch_funding_data(params=None)</code>","text":"<p>List historical funding data by market</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict | None</code> <p><code>cursor</code>: Returns the <code>next</code> paginated page</p> <p><code>end_at</code>: End Time (unix time millisecond)</p> <p><code>market</code>: Market for which funding payments are queried</p> <p><code>page_size</code>: Limit the number of responses in the page</p> <p><code>start_at</code>: Start Time (unix time millisecond)</p> <code>None</code> <p>Returns:</p> Name Type Description <code>next</code> <code>str</code> <p>The pointer to fetch next set of records (null if there are no records left)</p> <code>prev</code> <code>str</code> <p>The pointer to fetch previous set of records (null if there are no records left)</p> <code>results</code> <code>list</code> <p>List of Funding Payments</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_funding_payments","title":"<code>fetch_funding_payments(params=None)</code>","text":"<p>Fetch history of funding payments for this account.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict | None</code> <p><code>cursor</code>: Returns the <code>next</code> paginated page</p> <p><code>end_at</code>: End Time (unix time millisecond)</p> <p><code>market</code>: Market for which funding payments are queried</p> <p><code>page_size</code>: Limit the number of responses in the page</p> <p><code>start_at</code>: Start Time (unix time millisecond)</p> <code>None</code> <p>Returns:</p> Name Type Description <code>next</code> <code>str</code> <p>The pointer to fetch next set of records (null if there are no records left)</p> <code>prev</code> <code>str</code> <p>The pointer to fetch previous set of records (null if there are no records left)</p> <code>results</code> <code>list</code> <p>List of Funding Payments</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_insurance_fund","title":"<code>fetch_insurance_fund()</code>","text":"<p>Fetch insurance fund information</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_klines","title":"<code>fetch_klines(symbol, resolution, start_at, end_at, price_kind=None)</code>","text":"<p>Fetch OHLCV candlestick data for a symbol.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>Symbol of the market pair</p> required <code>resolution</code> <code>str</code> <p>Resolution in minutes: 1, 3, 5, 15, 30, 60</p> required <code>start_at</code> <code>int</code> <p>Start time for klines in milliseconds</p> required <code>end_at</code> <code>int</code> <p>End time for klines in milliseconds</p> required <code>price_kind</code> <code>str | None</code> <p>Which price to use for the klines (optional)</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>List of OHLCV candlestick data</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_liquidations","title":"<code>fetch_liquidations(params=None)</code>","text":"<p>Fetch history of liquidations for this account.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict | None</code> <p><code>start</code> (int): start time in milliseconds since epoch. <code>end</code> (int): end time in milliseconds since epoch.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>results</code> <code>list</code> <p>List of Liquidations</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_markets","title":"<code>fetch_markets(params=None)</code>","text":"<p>Fetch all markets information.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict | None</code> <p><code>market</code>: Market Name</p> <code>None</code> <p>Returns:</p> Name Type Description <code>results</code> <code>list</code> <p>List of Markets</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_markets_summary","title":"<code>fetch_markets_summary(params=None)</code>","text":"<p>Fetch ticker information for specific market.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict | None</code> <p><code>end</code>: End Time (unix time millisecond)</p> <p><code>market</code>: Name of the market for which summary is requested (for all available markets use ALL)</p> <p><code>start</code>: Start Time (unix time millisecond)</p> <code>None</code> <p>Returns:</p> Name Type Description <code>results</code> <code>list</code> <p>List of Market Summaries</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_order","title":"<code>fetch_order(order_id)</code>","text":"<p>Fetch a state of specific order sent from this account.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>order's id as assigned by Paradex.</p> required"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_order_by_client_id","title":"<code>fetch_order_by_client_id(client_id)</code>","text":"<p>Fetch a state of specific order sent from this account.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>order's client_id as assigned by a trader.</p> required"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_orderbook","title":"<code>fetch_orderbook(market, params=None)</code>","text":"<p>Fetch order-book for specific market.</p> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>str</code> <p>Market Name</p> required <code>params</code> <code>dict | None</code> <p><code>depth</code>: Depth</p> <code>None</code>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_orders","title":"<code>fetch_orders(params=None)</code>","text":"<p>Fetch open orders for the account.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict | None</code> <p><code>market</code>: Market for the order</p> <code>None</code> <p>Returns:</p> Name Type Description <code>results</code> <code>list</code> <p>Orders list</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_orders_history","title":"<code>fetch_orders_history(params=None)</code>","text":"<p>Fetch history of orders for the account.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict | None</code> <p><code>client_id</code>: Unique ID of client generating the order</p> <p><code>cursor</code>: Returns the <code>next</code> paginated page</p> <p><code>end_at</code>: End Time (unix time millisecond)</p> <p><code>market</code>: Market for the order</p> <p><code>page_size</code>: Limit the number of responses in the page</p> <p><code>side</code>: Order side</p> <p><code>start_at</code>: Start Time (unix time millisecond)</p> <p><code>status</code>: Order status</p> <p><code>type</code>: Order type</p> <code>None</code> <p>Returns:</p> Name Type Description <code>next</code> <code>str</code> <p>The pointer to fetch next set of records (null if there are no records left)</p> <code>prev</code> <code>str</code> <p>The pointer to fetch previous set of records (null if there are no records left)</p> <code>results</code> <code>list</code> <p>List of Orders</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_points_data","title":"<code>fetch_points_data(market, program)</code>","text":"<p>Fetch points program data for specific market.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>str</code> <p>Market Name</p> required <code>program</code> <code>str</code> <p>Program Name - example: Maker, Fee</p> required <p>Returns:</p> Name Type Description <code>results</code> <code>list</code> <p>List of points data</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_positions","title":"<code>fetch_positions()</code>","text":"<p>Fetch all derivatives positions for this account.     Private endpoint requires authorization.</p> <p>Returns:</p> Name Type Description <code>next</code> <code>str</code> <p>The pointer to fetch next set of records (null if there are no records left)</p> <code>prev</code> <code>str</code> <p>The pointer to fetch previous set of records (null if there are no records left)</p> <code>results</code> <code>list</code> <p>List of Positions</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_subaccounts","title":"<code>fetch_subaccounts()</code>","text":"<p>Fetch list of sub-accounts for this account. Private endpoint requires authorization.</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_system_config","title":"<code>fetch_system_config()</code>","text":"<p>Fetch Paradex system config.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; paradex.api_client.fetch_system_config()\n&gt;&gt;&gt; { ..., \"paraclear_decimals\": 8, ... }\n</code></pre>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_system_state","title":"<code>fetch_system_state()</code>","text":"<p>Fetch Paradex system status.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; paradex.api_client.fetch_system_state()\n&gt;&gt;&gt; { \"status\": \"ok\" }\n</code></pre>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_system_time","title":"<code>fetch_system_time()</code>","text":"<p>Fetch Paradex system time.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; paradex.api_client.fetch_system_time()\n&gt;&gt;&gt; { \"server_time\": \"1710956478221\" }\n</code></pre> <p>Returns:</p> Name Type Description <code>server_time</code> <code>dict</code> <p>Paradex Server time</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_tradebusts","title":"<code>fetch_tradebusts(params=None)</code>","text":"<p>Fetch history of tradebusts for this account.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict | None</code> <p><code>cursor</code>: Returns the <code>next</code> paginated page</p> <p><code>end_at</code>: End Time (unix time millisecond)</p> <p><code>page_size</code>: Limit the number of responses in the page</p> <p><code>start_at</code>: Start Time (unix time millisecond)</p> <code>None</code> <p>Returns:</p> Name Type Description <code>next</code> <code>str</code> <p>The pointer to fetch next set of records (null if there are no records left)</p> <code>prev</code> <code>str</code> <p>The pointer to fetch previous set of records (null if there are no records left)</p> <code>results</code> <code>list</code> <p>List of Tradebusts</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_trades","title":"<code>fetch_trades(params)</code>","text":"<p>Fetch Paradex exchange trades for specific market.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict</code> <p><code>market</code>: Market Name</p> required <p>Returns:</p> Name Type Description <code>next</code> <code>str</code> <p>The pointer to fetch next set of records (null if there are no records left)</p> <code>prev</code> <code>str</code> <p>The pointer to fetch previous set of records (null if there are no records left)</p> <code>results</code> <code>list</code> <p>List of Trades</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_transactions","title":"<code>fetch_transactions(params=None)</code>","text":"<p>Fetch history of transactions initiated by this account.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict | None</code> <p><code>cursor</code>: Returns the <code>next</code> paginated page</p> <p><code>end_at</code>: End Time (unix time millisecond)</p> <p><code>page_size</code>: Limit the number of responses in the page</p> <p><code>start_at</code>: Start Time (unix time millisecond)</p> <code>None</code> <p>Returns:</p> Name Type Description <code>next</code> <code>str</code> <p>The pointer to fetch next set of records (null if there are no records left)</p> <code>prev</code> <code>str</code> <p>The pointer to fetch previous set of records (null if there are no records left)</p> <code>results</code> <code>list</code> <p>List of Transactions</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.fetch_transfers","title":"<code>fetch_transfers(params=None)</code>","text":"<p>Fetch history of transfers initiated by this account.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict | None</code> <p><code>cursor</code>: Returns the <code>next</code> paginated page</p> <p><code>end_at</code>: End Time (unix time millisecond)</p> <p><code>page_size</code>: Limit the number of responses in the page</p> <p><code>start_at</code>: Start Time (unix time millisecond)</p> <p><code>status</code>: none</p> <code>None</code> <p>Returns:</p> Name Type Description <code>next</code> <code>str</code> <p>The pointer to fetch next set of records (null if there are no records left)</p> <code>prev</code> <code>str</code> <p>The pointer to fetch previous set of records (null if there are no records left)</p> <code>results</code> <code>list</code> <p>List of Transfers</p>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.modify_order","title":"<code>modify_order(order_id, order, signer=None)</code>","text":"<p>Modify an open order previously sent to Paradex from this account.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>Order Id</p> required <code>order</code> <code>Order</code> <p>Order update</p> required <code>signer</code> <code>Signer | None</code> <p>Optional custom signer. Uses instance signer or account signer if None.</p> <code>None</code>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.set_token","title":"<code>set_token(jwt)</code>","text":"<p>Inject a JWT token without HTTP calls.</p> <p>Useful for simulation and testing scenarios where you want to bypass the normal authentication flow.</p> <p>Parameters:</p> Name Type Description Default <code>jwt</code> <code>str</code> <p>JWT token string</p> required"},{"location":"#paradex_py.api.api_client.ParadexApiClient.submit_order","title":"<code>submit_order(order, signer=None)</code>","text":"<p>Send order to Paradex.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>order</code> <code>Order</code> <p>Order containing all required fields.</p> required <code>signer</code> <code>Signer | None</code> <p>Optional custom signer. Uses instance signer or account signer if None.</p> <code>None</code>"},{"location":"#paradex_py.api.api_client.ParadexApiClient.submit_orders_batch","title":"<code>submit_orders_batch(orders, signer=None)</code>","text":"<p>Send batch of orders to Paradex.     Private endpoint requires authorization.</p> <p>Parameters:</p> Name Type Description Default <code>orders</code> <code>list[Order]</code> <p>List of orders containing all required fields.</p> required <code>signer</code> <code>Signer | None</code> <p>Optional custom signer. Uses instance signer or account signer if None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>orders</code> <code>list</code> <p>List of Orders</p> <code>errors</code> <code>list</code> <p>List of Errors</p>"},{"location":"#paradex_py.api.ws_client.ParadexWebsocketChannel","title":"<code>paradex_py.api.ws_client.ParadexWebsocketChannel</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Enum class to define the channels for Paradex Websocket API.</p> <p>Attributes:</p> Name Type Description <code>ACCOUNT</code> <code>str</code> <p>Private websocket channel for receiving updates of account status</p> <code>BALANCE_EVENTS</code> <code>str</code> <p>Private websocket channel to receive PnL calculation data</p> <code>BBO</code> <code>str</code> <p>Public websocket channel for tick updates of orderbook best bid/ask prices and amounts</p> <code>FILLS</code> <code>str</code> <p>Private websocket channel to receive details of fills for specific account</p> <code>FUNDING_DATA</code> <code>str</code> <p>Public websocket channel to receive funding data updates</p> <code>FUNDING_PAYMENTS</code> <code>str</code> <p>Private websocket channel to receive funding payments of an account</p> <code>FUNDING_RATE_COMPARISON</code> <code>str</code> <p>Public websocket channel for funding rate comparisons across exchanges</p> <code>MARKETS_SUMMARY</code> <code>str</code> <p>Public websocket channel for updates of available markets</p> <code>ORDERS</code> <code>str</code> <p>Private websocket channel to receive order updates</p> <code>ORDER_BOOK</code> <code>str</code> <p>Public websocket channel for orderbook snapshot updates of depth 15 at most every 50ms or 100ms, optionally grouped by price tick</p> <code>POSITIONS</code> <code>str</code> <p>Private websocket channel to receive updates when position is changed</p> <code>TRADES</code> <code>str</code> <p>Public websocket channel to receive updates on trades in particular market</p> <code>TRADEBUSTS</code> <code>str</code> <p>Private websocket channel to receive fills that are busted by a blockchain</p> <code>TRANSACTIONS</code> <code>str</code> <p>Private websocket channel for receiving transaction details of fills</p> <code>TRANSFERS</code> <code>str</code> <p>Websocket channel for receiving transfer updates</p>"},{"location":"#paradex_py.api.ws_client.ParadexWebsocketClient","title":"<code>paradex_py.api.ws_client.ParadexWebsocketClient</code>","text":"<p>Class to interact with Paradex WebSocket JSON-RPC API.     Initialized along with <code>Paradex</code> class.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>Environment</code> <p>Environment</p> required <code>logger</code> <code>Optional[Logger]</code> <p>Logger. Defaults to None.</p> <code>None</code> <code>ws_timeout</code> <code>Optional[int]</code> <p>WebSocket read timeout in seconds. Defaults to 20s.</p> <code>None</code> <code>auto_start_reader</code> <code>bool</code> <p>Whether to automatically start the message reader. Defaults to True.</p> <code>True</code> <code>connector</code> <code>Optional[WebSocketConnector]</code> <p>Custom WebSocket connector for injection. Defaults to None.</p> <code>None</code> <code>ws_url_override</code> <code>Optional[str]</code> <p>Custom WebSocket URL override. Defaults to None.</p> <code>None</code> <code>reader_sleep_on_error</code> <code>float</code> <p>Sleep duration after connection errors. Set to 0 for no sleep. Defaults to 1.0.</p> <code>1.0</code> <code>reader_sleep_on_no_connection</code> <code>float</code> <p>Sleep duration when no connection. Set to 0 for no sleep. Defaults to 1.0.</p> <code>1.0</code> <code>validate_messages</code> <code>bool</code> <p>Enable pydantic message validation. Requires pydantic. Defaults to False.</p> <code>False</code> <code>ping_interval</code> <code>float</code> <p>WebSocket ping interval in seconds. None uses websockets default. Defaults to None.</p> <code>None</code> <code>disable_reconnect</code> <code>bool</code> <p>Disable automatic reconnection for tight simulation control. Defaults to False.</p> <code>False</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from paradex_py import Paradex\n&gt;&gt;&gt; from paradex_py.environment import Environment\n&gt;&gt;&gt; paradex = Paradex(env=Environment.TESTNET)\n&gt;&gt;&gt; paradex.ws_client.connect()\n&gt;&gt;&gt; # With custom timeout\n&gt;&gt;&gt; from paradex_py.api.ws_client import ParadexWebsocketClient\n&gt;&gt;&gt; ws_client = ParadexWebsocketClient(env=Environment.TESTNET, ws_timeout=30)\n&gt;&gt;&gt; # With manual pumping disabled\n&gt;&gt;&gt; ws_client = ParadexWebsocketClient(env=Environment.TESTNET, auto_start_reader=False)\n&gt;&gt;&gt; # High-frequency simulator mode (no sleeps)\n&gt;&gt;&gt; ws_client = ParadexWebsocketClient(env=Environment.TESTNET,\n...                                   reader_sleep_on_error=0, reader_sleep_on_no_connection=0)\n&gt;&gt;&gt; # With typed message validation\n&gt;&gt;&gt; ws_client = ParadexWebsocketClient(env=Environment.TESTNET, validate_messages=True)\n</code></pre>"},{"location":"#paradex_py.api.ws_client.ParadexWebsocketClient.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>Connect to Paradex WebSocket API.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if connection is successful.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from paradex_py import Paradex\n&gt;&gt;&gt; from paradex_py.environment import TESTNET\n&gt;&gt;&gt; async def main():\n...     paradex = Paradex(env=TESTNET)\n...     await paradex.ws_client.connect()\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; asyncio.run(main())\n</code></pre>"},{"location":"#paradex_py.api.ws_client.ParadexWebsocketClient.get_subscriptions","title":"<code>get_subscriptions()</code>","text":"<p>Get current subscription map.</p> <p>Returns:</p> Type Description <code>dict[str, bool]</code> <p>Dictionary mapping channel names to subscription status</p>"},{"location":"#paradex_py.api.ws_client.ParadexWebsocketClient.inject","title":"<code>inject(message)</code>  <code>async</code>","text":"<p>Inject a raw message string into the message processing pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Raw JSON string to process as if received from WebSocket.</p> required"},{"location":"#paradex_py.api.ws_client.ParadexWebsocketClient.pump_once","title":"<code>pump_once()</code>  <code>async</code>","text":"<p>Manually pump one message from the WebSocket connection.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if a message was processed, False if no message available or connection closed.</p>"},{"location":"#paradex_py.api.ws_client.ParadexWebsocketClient.pump_until","title":"<code>pump_until(predicate, timeout_s=10.0)</code>  <code>async</code>","text":"<p>Deterministic consumption helper for simulators.</p> <p>Pumps messages until predicate returns True or timeout is reached. Useful for waiting for specific message conditions in tests.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Callable[[dict], bool]</code> <p>Function that takes a message dict and returns True to stop</p> required <code>timeout_s</code> <code>float</code> <p>Maximum time to wait in seconds</p> <code>10.0</code> <p>Returns:</p> Type Description <code>int</code> <p>Number of messages processed before predicate was satisfied or timeout</p> <p>Examples:</p>"},{"location":"#paradex_py.api.ws_client.ParadexWebsocketClient.pump_until--wait-for-bbo-message-with-specific-price","title":"Wait for BBO message with specific price","text":"<p>count = await ws_client.pump_until(     lambda msg: msg.get('params', {}).get('channel', '').startswith('bbo')                and float(msg.get('data', {}).get('bid', 0)) &gt; 50000,     timeout_s=5.0 )</p>"},{"location":"#paradex_py.api.ws_client.ParadexWebsocketClient.subscribe","title":"<code>subscribe(channel, callback, params=None)</code>  <code>async</code>","text":"<p>Subscribe to a websocket channel with optional parameters.     Callback function is invoked when a message is received.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>ParadexWebsocketChannel</code> <p>Channel to subscribe</p> required <code>callback</code> <code>Callable</code> <p>Callback function</p> required <code>params</code> <code>Optional[dict]</code> <p>Parameters for the channel. Defaults to None.</p> <code>None</code> <p>Examples:</p> <p>from paradex_py import Paradex from paradex_py.environment import TESTNET from paradex_py.api.ws_client import ParadexWebsocketChannel, ParadexWebsocketClient async def main(): ...     async def on_message(ws_channel, message): ...         print(ws_channel, message) ...     paradex = Paradex(env=TESTNET) ...     await paradex.ws_client.connect() ...     await paradex.ws_client.subscribe(ParadexWebsocketChannel.MARKETS_SUMMARY, callback=on_message) import asyncio asyncio.run(main())</p>"},{"location":"#paradex_py.api.ws_client.ParadexWebsocketClient.subscribe_by_name","title":"<code>subscribe_by_name(channel_name, callback=None)</code>  <code>async</code>","text":"<p>Subscribe to a channel by exact name string.</p> <p>This is useful for simulation tooling where you want to subscribe to channels with exact names without using the enum formatting.</p> <p>Parameters:</p> Name Type Description Default <code>channel_name</code> <code>str</code> <p>Exact channel name (e.g., \"bbo.BTC-USD-PERP\")</p> required <code>callback</code> <code>Callable | None</code> <p>Optional callback function. If provided, registers the callback.</p> <code>None</code>"},{"location":"#paradex_py.api.ws_client.ParadexWebsocketClient.unsubscribe_by_name","title":"<code>unsubscribe_by_name(channel_name)</code>  <code>async</code>","text":"<p>Unsubscribe from a channel by exact name string.</p> <p>Symmetric with subscribe_by_name for complete channel lifecycle control.</p> <p>Parameters:</p> Name Type Description Default <code>channel_name</code> <code>str</code> <p>Exact channel name (e.g., \"bbo.BTC-USD-PERP\")</p> required"},{"location":"#paradex_py.account.account.ParadexAccount","title":"<code>paradex_py.account.account.ParadexAccount</code>","text":"<p>Class to generate and manage Paradex account.     Initialized along with <code>Paradex</code> class.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SystemConfig</code> <p>SystemConfig</p> required <code>l1_address</code> <code>str</code> <p>Ethereum address</p> required <code>l1_private_key</code> <code>Optional[str]</code> <p>Ethereum private key. Defaults to None.</p> <code>None</code> <code>l2_private_key</code> <code>Optional[str]</code> <p>Paradex private key. Defaults to None.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from paradex_py import Paradex\n&gt;&gt;&gt; from paradex_py.environment import Environment\n&gt;&gt;&gt; paradex = Paradex(env=Environment.TESTNET, l1_address=\"0x...\", l1_private_key=\"0x...\")\n&gt;&gt;&gt; paradex.account.l2_address\n&gt;&gt;&gt; paradex.account.l2_public_key\n&gt;&gt;&gt; paradex.account.l2_private_key\n</code></pre>"},{"location":"#paradex_py.account.account.ParadexAccount.sign_block_offer","title":"<code>sign_block_offer(offer_data)</code>","text":"<p>Sign block offer data using Starknet account. Args:     offer_data (dict): Block offer data containing offer details Returns:     dict: Signed block offer data</p>"},{"location":"#paradex_py.account.account.ParadexAccount.sign_block_trade","title":"<code>sign_block_trade(block_trade_data)</code>","text":"<p>Sign block trade data using Starknet account. Args:     block_trade_data (dict): Block trade data containing trade details Returns:     dict: Signed block trade data</p>"},{"location":"#paradex_py.account.subkey_account.SubkeyAccount","title":"<code>paradex_py.account.subkey_account.SubkeyAccount</code>","text":"<p>             Bases: <code>ParadexAccount</code></p> <p>Subkey account for L2-only API authentication (no on-chain operations).</p> <p>This account type is designed for subkey usage where only L2 credentials are available and no L1 onboarding is required.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SystemConfig</code> <p>SystemConfig</p> required <code>l2_private_key</code> <code>str</code> <p>L2 private key (required)</p> required <code>l2_address</code> <code>str</code> <p>L2 address of the main account (required)</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from paradex_py.account.subkey_account import SubkeyAccount\n&gt;&gt;&gt; from paradex_py.environment import Environment\n&gt;&gt;&gt; account = SubkeyAccount(\n...     config=config,\n...     l2_private_key=\"0x...\",\n...     l2_address=\"0x...\"\n... )\n</code></pre>"},{"location":"#paradex_py.account.subkey_account.SubkeyAccount.onboarding_headers","title":"<code>onboarding_headers()</code>","text":"<p>Override to prevent onboarding for subkeys.</p>"},{"location":"#paradex_py.account.subkey_account.SubkeyAccount.transfer_on_l2","title":"<code>transfer_on_l2(target_l2_address, amount_decimal)</code>","text":"<p>Override to prevent on-chain operations for subkeys.</p>"}]}